// Code generated by MockGen. DO NOT EDIT.
// Source: app/resp/resp_reader.go

// Package mock_resp is a generated GoMock package.
package resp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStringReader is a mock of StringReader interface.
type MockStringReader struct {
	ctrl     *gomock.Controller
	recorder *MockStringReaderMockRecorder
}

// MockStringReaderMockRecorder is the mock recorder for MockStringReader.
type MockStringReaderMockRecorder struct {
	mock *MockStringReader
}

// NewMockStringReader creates a new mock instance.
func NewMockStringReader(ctrl *gomock.Controller) *MockStringReader {
	mock := &MockStringReader{ctrl: ctrl}
	mock.recorder = &MockStringReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringReader) EXPECT() *MockStringReaderMockRecorder {
	return m.recorder
}

// ReadString mocks base method.
func (m *MockStringReader) ReadString(delim byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadString", delim)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadString indicates an expected call of ReadString.
func (mr *MockStringReaderMockRecorder) ReadString(delim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadString", reflect.TypeOf((*MockStringReader)(nil).ReadString), delim)
}
