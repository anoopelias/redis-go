// Code generated by MockGen. DO NOT EDIT.
// Source: app/resp_reader.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStringReader is a mock of StringReader interface.
type MockStringReader struct {
	ctrl     *gomock.Controller
	recorder *MockStringReaderMockRecorder
}

// MockStringReaderMockRecorder is the mock recorder for MockStringReader.
type MockStringReaderMockRecorder struct {
	mock *MockStringReader
}

// NewMockStringReader creates a new mock instance.
func NewMockStringReader(ctrl *gomock.Controller) *MockStringReader {
	mock := &MockStringReader{ctrl: ctrl}
	mock.recorder = &MockStringReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringReader) EXPECT() *MockStringReaderMockRecorder {
	return m.recorder
}

// ReadString mocks base method.
func (m *MockStringReader) ReadString(delim byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadString", delim)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadString indicates an expected call of ReadString.
func (mr *MockStringReaderMockRecorder) ReadString(delim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadString", reflect.TypeOf((*MockStringReader)(nil).ReadString), delim)
}

// MockRespReader is a mock of RespReader interface.
type MockRespReader struct {
	ctrl     *gomock.Controller
	recorder *MockRespReaderMockRecorder
}

// MockRespReaderMockRecorder is the mock recorder for MockRespReader.
type MockRespReaderMockRecorder struct {
	mock *MockRespReader
}

// NewMockRespReader creates a new mock instance.
func NewMockRespReader(ctrl *gomock.Controller) *MockRespReader {
	mock := &MockRespReader{ctrl: ctrl}
	mock.recorder = &MockRespReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRespReader) EXPECT() *MockRespReaderMockRecorder {
	return m.recorder
}

// ReadArrayLen mocks base method.
func (m *MockRespReader) ReadArrayLen() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadArrayLen")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadArrayLen indicates an expected call of ReadArrayLen.
func (mr *MockRespReaderMockRecorder) ReadArrayLen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadArrayLen", reflect.TypeOf((*MockRespReader)(nil).ReadArrayLen))
}

// ReadBulkString mocks base method.
func (m *MockRespReader) ReadBulkString() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBulkString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBulkString indicates an expected call of ReadBulkString.
func (mr *MockRespReaderMockRecorder) ReadBulkString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBulkString", reflect.TypeOf((*MockRespReader)(nil).ReadBulkString))
}

// ReadLine mocks base method.
func (m *MockRespReader) ReadLine() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLine indicates an expected call of ReadLine.
func (mr *MockRespReaderMockRecorder) ReadLine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockRespReader)(nil).ReadLine))
}
