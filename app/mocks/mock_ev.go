// Code generated by MockGen. DO NOT EDIT.
// Source: redis-go/app/ev (interfaces: SysCall,SysCallError,StringReader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	syscall "syscall"

	gomock "github.com/golang/mock/gomock"
)

// MockSysCall is a mock of SysCall interface.
type MockSysCall struct {
	ctrl     *gomock.Controller
	recorder *MockSysCallMockRecorder
}

// MockSysCallMockRecorder is the mock recorder for MockSysCall.
type MockSysCallMockRecorder struct {
	mock *MockSysCall
}

// NewMockSysCall creates a new mock instance.
func NewMockSysCall(ctrl *gomock.Controller) *MockSysCall {
	mock := &MockSysCall{ctrl: ctrl}
	mock.recorder = &MockSysCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysCall) EXPECT() *MockSysCallMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockSysCall) Accept(arg0 int) (int, syscall.Sockaddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(syscall.Sockaddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Accept indicates an expected call of Accept.
func (mr *MockSysCallMockRecorder) Accept(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockSysCall)(nil).Accept), arg0)
}

// Bind mocks base method.
func (m *MockSysCall) Bind(arg0 int, arg1 syscall.Sockaddr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockSysCallMockRecorder) Bind(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockSysCall)(nil).Bind), arg0, arg1)
}

// Close mocks base method.
func (m *MockSysCall) Close(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSysCallMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSysCall)(nil).Close), arg0)
}

// Listen mocks base method.
func (m *MockSysCall) Listen(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockSysCallMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockSysCall)(nil).Listen), arg0, arg1)
}

// Read mocks base method.
func (m *MockSysCall) Read(arg0 int, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSysCallMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSysCall)(nil).Read), arg0, arg1)
}

// SetNonblock mocks base method.
func (m *MockSysCall) SetNonblock(arg0 int, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNonblock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNonblock indicates an expected call of SetNonblock.
func (mr *MockSysCallMockRecorder) SetNonblock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonblock", reflect.TypeOf((*MockSysCall)(nil).SetNonblock), arg0, arg1)
}

// Socket mocks base method.
func (m *MockSysCall) Socket(arg0, arg1, arg2 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Socket", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Socket indicates an expected call of Socket.
func (mr *MockSysCallMockRecorder) Socket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Socket", reflect.TypeOf((*MockSysCall)(nil).Socket), arg0, arg1, arg2)
}

// Write mocks base method.
func (m *MockSysCall) Write(arg0 int, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSysCallMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSysCall)(nil).Write), arg0, arg1)
}

// MockSysCallError is a mock of SysCallError interface.
type MockSysCallError struct {
	ctrl     *gomock.Controller
	recorder *MockSysCallErrorMockRecorder
}

// MockSysCallErrorMockRecorder is the mock recorder for MockSysCallError.
type MockSysCallErrorMockRecorder struct {
	mock *MockSysCallError
}

// NewMockSysCallError creates a new mock instance.
func NewMockSysCallError(ctrl *gomock.Controller) *MockSysCallError {
	mock := &MockSysCallError{ctrl: ctrl}
	mock.recorder = &MockSysCallErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSysCallError) EXPECT() *MockSysCallErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockSysCallError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockSysCallErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSysCallError)(nil).Error))
}

// Timeout mocks base method.
func (m *MockSysCallError) Timeout() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockSysCallErrorMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockSysCallError)(nil).Timeout))
}

// MockStringReader is a mock of StringReader interface.
type MockStringReader struct {
	ctrl     *gomock.Controller
	recorder *MockStringReaderMockRecorder
}

// MockStringReaderMockRecorder is the mock recorder for MockStringReader.
type MockStringReaderMockRecorder struct {
	mock *MockStringReader
}

// NewMockStringReader creates a new mock instance.
func NewMockStringReader(ctrl *gomock.Controller) *MockStringReader {
	mock := &MockStringReader{ctrl: ctrl}
	mock.recorder = &MockStringReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringReader) EXPECT() *MockStringReaderMockRecorder {
	return m.recorder
}

// ReadString mocks base method.
func (m *MockStringReader) ReadString(arg0 byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadString indicates an expected call of ReadString.
func (mr *MockStringReaderMockRecorder) ReadString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadString", reflect.TypeOf((*MockStringReader)(nil).ReadString), arg0)
}
